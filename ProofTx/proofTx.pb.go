// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ProofTx/proofTx.proto

/*
Package proofTx is a generated protocol buffer package.

It is generated from these files:
	ProofTx/proofTx.proto

It has these top-level messages:
	ProofTX
	SupercededBy
*/
package proofTx

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
//const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProofTX_ProofType int32

const (
	ProofTX_NULL          ProofTX_ProofType = 0
	ProofTX_SECP256K1     ProofTX_ProofType = 1
	ProofTX_SECP256K1SHA2 ProofTX_ProofType = 2
)

var ProofTX_ProofType_name = map[int32]string{
	0: "NULL",
	1: "SECP256K1",
	2: "SECP256K1SHA2",
}
var ProofTX_ProofType_value = map[string]int32{
	"NULL":          0,
	"SECP256K1":     1,
	"SECP256K1SHA2": 2,
}

func (x ProofTX_ProofType) String() string {
	return proto.EnumName(ProofTX_ProofType_name, int32(x))
}
func (ProofTX_ProofType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type SupercededBy_ProofType int32

const (
	SupercededBy_NULL          SupercededBy_ProofType = 0
	SupercededBy_SECP256K1     SupercededBy_ProofType = 1
	SupercededBy_SECP256K1SHA2 SupercededBy_ProofType = 2
)

var SupercededBy_ProofType_name = map[int32]string{
	0: "NULL",
	1: "SECP256K1",
	2: "SECP256K1SHA2",
}
var SupercededBy_ProofType_value = map[string]int32{
	"NULL":          0,
	"SECP256K1":     1,
	"SECP256K1SHA2": 2,
}

func (x SupercededBy_ProofType) String() string {
	return proto.EnumName(SupercededBy_ProofType_name, int32(x))
}
func (SupercededBy_ProofType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type ProofTX struct {
	Type       ProofTX_ProofType `protobuf:"varint,1,opt,name=type,enum=ProofTX_ProofType" json:"type,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Threshold  int32             `protobuf:"varint,3,opt,name=threshold" json:"threshold,omitempty"`
	Data       string            `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	PubKeys    [][]byte          `protobuf:"bytes,5,rep,name=PubKeys,proto3" json:"PubKeys,omitempty"`
	Signatures [][]byte          `protobuf:"bytes,6,rep,name=Signatures,proto3" json:"Signatures,omitempty"`
	Digests    [][]byte          `protobuf:"bytes,7,rep,name=Digests,proto3" json:"Digests,omitempty"`
	PreImages  [][]byte          `protobuf:"bytes,8,rep,name=PreImages,proto3" json:"PreImages,omitempty"`
	Supercede  *SupercededBy     `protobuf:"bytes,9,opt,name=Supercede" json:"Supercede,omitempty"`
	EventData  string            `protobuf:"bytes,10,opt,name=eventData" json:"eventData,omitempty"`
}

func (m *ProofTX) Reset()                    { *m = ProofTX{} }
func (m *ProofTX) String() string            { return proto.CompactTextString(m) }
func (*ProofTX) ProtoMessage()               {}
func (*ProofTX) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProofTX) GetType() ProofTX_ProofType {
	if m != nil {
		return m.Type
	}
	return ProofTX_NULL
}

func (m *ProofTX) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProofTX) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *ProofTX) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *ProofTX) GetPubKeys() [][]byte {
	if m != nil {
		return m.PubKeys
	}
	return nil
}

func (m *ProofTX) GetSignatures() [][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *ProofTX) GetDigests() [][]byte {
	if m != nil {
		return m.Digests
	}
	return nil
}

func (m *ProofTX) GetPreImages() [][]byte {
	if m != nil {
		return m.PreImages
	}
	return nil
}

func (m *ProofTX) GetSupercede() *SupercededBy {
	if m != nil {
		return m.Supercede
	}
	return nil
}

func (m *ProofTX) GetEventData() string {
	if m != nil {
		return m.EventData
	}
	return ""
}

type SupercededBy struct {
	Type      SupercededBy_ProofType `protobuf:"varint,1,opt,name=type,enum=SupercededBy_ProofType" json:"type,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	PubKeys   [][]byte               `protobuf:"bytes,3,rep,name=PubKeys,proto3" json:"PubKeys,omitempty"`
	Digests   [][]byte               `protobuf:"bytes,4,rep,name=Digests,proto3" json:"Digests,omitempty"`
	Threshold int32                  `protobuf:"varint,5,opt,name=threshold" json:"threshold,omitempty"`
}

func (m *SupercededBy) Reset()                    { *m = SupercededBy{} }
func (m *SupercededBy) String() string            { return proto.CompactTextString(m) }
func (*SupercededBy) ProtoMessage()               {}
func (*SupercededBy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SupercededBy) GetType() SupercededBy_ProofType {
	if m != nil {
		return m.Type
	}
	return SupercededBy_NULL
}

func (m *SupercededBy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SupercededBy) GetPubKeys() [][]byte {
	if m != nil {
		return m.PubKeys
	}
	return nil
}

func (m *SupercededBy) GetDigests() [][]byte {
	if m != nil {
		return m.Digests
	}
	return nil
}

func (m *SupercededBy) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func init() {
	//proto.RegisterType((*ProofTX)(nil), "ProofTX")
	//proto.RegisterType((*SupercededBy)(nil), "SupercededBy")
	proto.RegisterEnum("ProofTX_ProofType", ProofTX_ProofType_name, ProofTX_ProofType_value)
	proto.RegisterEnum("SupercededBy_ProofType", SupercededBy_ProofType_name, SupercededBy_ProofType_value)
	//proto.RegisterFile("ProofTx/proofTx.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x75, 0xdb, 0xf4, 0x23, 0x63, 0x2b, 0x75, 0x40, 0xdc, 0x83, 0x48, 0xe8, 0x41, 0x02, 0x85,
	0x8a, 0x11, 0xf5, 0xac, 0x56, 0x50, 0x5a, 0x24, 0x24, 0x0a, 0x5e, 0x53, 0x33, 0xb6, 0x05, 0xdb,
	0x84, 0xec, 0x56, 0xcc, 0x5f, 0xf5, 0x3f, 0xf8, 0x1f, 0x64, 0x37, 0xb1, 0x49, 0xf4, 0x22, 0x9e,
	0x66, 0xe6, 0x3d, 0x5e, 0xe6, 0xe5, 0xcd, 0xc2, 0x9e, 0x9b, 0x44, 0xd1, 0xcb, 0xc3, 0xfb, 0x71,
	0x9c, 0xd5, 0x61, 0x9c, 0x44, 0x32, 0xea, 0x7f, 0xd6, 0xa0, 0x95, 0x31, 0x4f, 0x78, 0x04, 0x86,
	0x4c, 0x63, 0xe2, 0xcc, 0x62, 0xf6, 0x8e, 0x83, 0xc3, 0x1c, 0xcf, 0x6b, 0x1a, 0x93, 0xa7, 0x79,
	0x44, 0x30, 0x56, 0xc1, 0x92, 0x78, 0xcd, 0x62, 0xb6, 0xe9, 0xe9, 0x1e, 0x0f, 0xc0, 0x94, 0xf3,
	0x84, 0xc4, 0x3c, 0x7a, 0x0d, 0x79, 0xdd, 0x62, 0x76, 0xc3, 0x2b, 0x00, 0xa5, 0x08, 0x03, 0x19,
	0x70, 0x23, 0x53, 0xa8, 0x1e, 0x39, 0xb4, 0xdc, 0xf5, 0x74, 0x4c, 0xa9, 0xe0, 0x0d, 0xab, 0x6e,
	0x77, 0xbc, 0xef, 0x11, 0x0f, 0x01, 0xfc, 0xc5, 0x6c, 0x15, 0xc8, 0x75, 0x42, 0x82, 0x37, 0x35,
	0x59, 0x42, 0x94, 0x72, 0xb4, 0x98, 0x91, 0x90, 0x82, 0xb7, 0x32, 0x65, 0x3e, 0x2a, 0x17, 0x6e,
	0x42, 0x77, 0xcb, 0x60, 0x46, 0x82, 0xb7, 0x35, 0x57, 0x00, 0x38, 0x00, 0xd3, 0x5f, 0xc7, 0x94,
	0x3c, 0x53, 0x48, 0xdc, 0xb4, 0x98, 0xbd, 0xed, 0x74, 0x87, 0x1b, 0x24, 0xbc, 0x4a, 0xbd, 0x82,
	0x57, 0x9f, 0xa2, 0x37, 0x5a, 0xc9, 0x91, 0xf2, 0x0d, 0xda, 0x77, 0x01, 0xf4, 0x2f, 0xd4, 0xa2,
	0x3c, 0x15, 0x6c, 0x83, 0x71, 0xff, 0x38, 0x99, 0xf4, 0xb6, 0xb0, 0x0b, 0xa6, 0x7f, 0x73, 0xed,
	0x3a, 0x67, 0xe7, 0xe3, 0x93, 0x1e, 0xc3, 0x5d, 0xe8, 0x6e, 0x46, 0xff, 0xf6, 0xd2, 0xe9, 0xd5,
	0xfa, 0x1f, 0x0c, 0x3a, 0xe5, 0x95, 0x38, 0xa8, 0x84, 0xbe, 0x5f, 0xf1, 0xf3, 0xa7, 0xe4, 0x4b,
	0x39, 0xd6, 0xab, 0x39, 0x96, 0x72, 0x32, 0x7e, 0xe5, 0x54, 0x5c, 0xab, 0xf1, 0xe3, 0x5a, 0xff,
	0xfe, 0xb9, 0x69, 0x53, 0xbf, 0xa9, 0xd3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x21, 0x70, 0x8b,
	0x2d, 0x6c, 0x02, 0x00, 0x00,
}
